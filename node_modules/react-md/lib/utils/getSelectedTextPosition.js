(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.getSelectedTextPosition = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = getSelectedTextPosition;
  /** @module utils/getSelectedTextPosition */

  var ZERO_WIDTH_CHARACTER = '\u200B';

  /**
   * A utility function to attempt to get the current highlighted text position.
   *
   * When a context menu is opened, this function attempts to find the bounding client rect
   * for the highlighted text. However, if the text is in the text field, some weird stuff
   * happens and it is unable to get it correctly.
   */
  function getSelectedTextPosition(e) {
    if (window.getSelection) {
      var selection = window.getSelection();
      if (selection.rangeCount) {
        var range = selection.getRangeAt(0).cloneRange();
        var rect = null;
        if (range.getClientRects) {
          var rects = range.getClientRects();
          if (rects.length > 0) {
            rect = rects[0];
          }
        }

        if (!rect) {
          var target = e.target,
              clientX = e.clientX,
              clientY = e.clientY;

          if (target.classList.contains('md-text-field')) {
            var selectionStart = target.selectionStart,
                selectionEnd = target.selectionEnd;

            var context = document.createElement('canvas').getContext('2d');
            var style = window.getComputedStyle(target);
            context.font = style.font;
            var width = Math.round(context.measureText(target.value.substring(selectionStart, selectionEnd)).width);

            return {
              left: clientX - width,
              top: clientY,
              width: width,
              height: parseInt(style.fontSize, 10)
            };
          }

          var span = document.createElement('span');
          span.appendChild(document.createTextNode(ZERO_WIDTH_CHARACTER));
          range.insertNode(span);
          rect = span.getBoundingClientRect();

          var spanParent = span.parentNode;
          spanParent.removeChild(span);
          spanParent.normalize();
        }

        return rect;
      }
    }

    return null;
  }
});