(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'classnames', 'react-dom', 'react-prop-types/lib/deprecated', '../utils/getField', '../Helpers/fixedToShape', '../Helpers/positionShape', '../SelectFields/SelectField', './findTable', './findFixedTo', './TableColumn'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('classnames'), require('react-dom'), require('react-prop-types/lib/deprecated'), require('../utils/getField'), require('../Helpers/fixedToShape'), require('../Helpers/positionShape'), require('../SelectFields/SelectField'), require('./findTable'), require('./findFixedTo'), require('./TableColumn'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.classnames, global.reactDom, global.deprecated, global.getField, global.fixedToShape, global.positionShape, global.SelectField, global.findTable, global.findFixedTo, global.TableColumn);
    global.SelectFieldColumn = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _classnames, _reactDom, _deprecated, _getField, _fixedToShape, _positionShape, _SelectField, _findTable, _findFixedTo, _TableColumn) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _deprecated2 = _interopRequireDefault(_deprecated);

  var _getField2 = _interopRequireDefault(_getField);

  var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

  var _positionShape2 = _interopRequireDefault(_positionShape);

  var _SelectField2 = _interopRequireDefault(_SelectField);

  var _findTable2 = _interopRequireDefault(_findTable);

  var _findFixedTo2 = _interopRequireDefault(_findFixedTo);

  var _TableColumn2 = _interopRequireDefault(_TableColumn);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var SelectFieldColumn = function (_PureComponent) {
    _inherits(SelectFieldColumn, _PureComponent);

    function SelectFieldColumn() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SelectFieldColumn);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SelectFieldColumn.__proto__ || Object.getPrototypeOf(SelectFieldColumn)).call.apply(_ref, [this].concat(args))), _this), _this.state = { cellIndex: undefined }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SelectFieldColumn, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var cellIndex = this.props.cellIndex;

        var column = (0, _reactDom.findDOMNode)(this);
        var table = (0, _findTable2.default)(column);
        this._fixedTo = (0, _findFixedTo2.default)(table);

        // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop
        // might not be defined if they don't pass ...props
        if (!cellIndex && cellIndex !== 0) {
          var columns = [].slice.call(column.parentNode.querySelectorAll('th,td'));
          this.setState({ cellIndex: columns.indexOf(column) }); // eslint-disable-line react/no-did-mount-set-state
        } else {
          // need to apply the _fixedTo for the select field
          this.forceUpdate();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var rowId = this.context.rowId;

        var _props = this.props,
            style = _props.style,
            className = _props.className,
            menuStyle = _props.menuStyle,
            menuClassName = _props.menuClassName,
            header = _props.header,
            fixedTo = _props.fixedTo,
            tooltipLabel = _props.tooltipLabel,
            tooltipDelay = _props.tooltipDelay,
            tooltipPosition = _props.tooltipPosition,
            propId = _props.id,
            propCellIndex = _props.cellIndex,
            wrapperStyle = _props.wrapperStyle,
            wrapperClassName = _props.wrapperClassName,
            adjusted = _props.adjusted,
            props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'fixedTo', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'id', 'cellIndex', 'wrapperStyle', 'wrapperClassName', 'adjusted']);

        var cellIndex = (0, _getField2.default)(this.props, this.state, 'cellIndex');

        var id = this.props.id;

        if (!id) {
          id = rowId + '-' + cellIndex + '-select-field';
        }

        return _react2.default.createElement(
          _TableColumn2.default,
          {
            header: header,
            style: style,
            className: (0, _classnames2.default)('md-select-field-column', className),
            adjusted: false,
            tooltipLabel: tooltipLabel,
            tooltipDelay: tooltipDelay,
            tooltipPosition: tooltipPosition
          },
          _react2.default.createElement(_SelectField2.default, _extends({}, props, {
            id: id,
            fixedTo: fixedTo || this._fixedTo,
            style: menuStyle,
            className: menuClassName
          }))
        );
      }
    }]);

    return SelectFieldColumn;
  }(_react.PureComponent);

  SelectFieldColumn.VerticalAnchors = _SelectField2.default.VerticalAnchors;
  SelectFieldColumn.HorizontalAnchors = _SelectField2.default.HorizontalAnchors;
  SelectFieldColumn.Positions = _SelectField2.default.Positions;
  SelectFieldColumn.propTypes = {
    /**
     * An optional id to use for the select field in the column. If this is omitted, it's value will be
     * `${rowId}-${cellIndex}-select`
     */
    id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    /**
     * This is the optional style to apply to the `TableColumn`.
     */
    style: _propTypes2.default.object,

    /**
     * This is the optional className to apply to the `TableColumn`.
     */
    className: _propTypes2.default.string,

    /**
     * The is the optional style to apply to the select field's menu container.
     *
     * @see {@link SelectFields/SelectField#style}
     */
    menuStyle: _propTypes2.default.object,

    /**
     * The is the optional class name to apply to the select field's menu container.
     *
     * @see {@link SelectFields/SelectField#className}
     */
    menuClassName: _propTypes2.default.string,

    /**
     * This is how the select field should be fixed within the table. When this is omitted,
     * it will automatically use the responsive table as the fixture so that the select field
     * will close/adjust itself to the scrolling of the table.
     *
     * @see {@link Helpers/Layovers#fixedTo}
     */
    fixedTo: _fixedToShape2.default,

    /**
     * Boolean if the select field should span the entire width of the column.
     */
    fullWidth: _propTypes2.default.bool,

    /**
     * The position for the select field.
     *
     * @see {@link SelectFields/SelectField#position}
     */
    position: _positionShape2.default,

    /**
     * This is injected by the `TableRow` component.
     * @access private
     */
    header: _propTypes2.default.bool,

    /**
     * This is injected by the `TableRow` component and used to help generate the unique id for the text
     * field.
     *
     * @access private
     */
    cellIndex: _propTypes2.default.number,

    /**
     * @access private
     */
    adjusted: _propTypes2.default.bool,

    /**
     * The optional tooltip to render on hover.
     *
     * @see {@link DataTables/TableColumn#tooltipLabel}
     */
    tooltipLabel: _propTypes2.default.string,

    /**
     * An optional delay to apply to the tooltip before it appears.
     *
     * @see {@link DataTables/TableColumn#tooltipDelay}
     */
    tooltipDelay: _propTypes2.default.number,

    /**
     * The position of the tooltip.
     *
     * @see {@link DataTables/TableColumn#tooltipPosition}
     */
    tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

    /**
     * Boolean if the menu should automatically try to reposition itself to stay within
     * the viewport when the `fixedTo` element scrolls.
     *
     * @see {@link Helpers/Layovers#fixedTo}
     */
    repositionOnScroll: _propTypes2.default.bool,

    wrapperStyle: (0, _deprecated2.default)(_propTypes2.default.object, 'There is no longer a wrapper'),
    wrapperClassName: (0, _deprecated2.default)(_propTypes2.default.string, 'There is no longer a wrapper')
  };
  SelectFieldColumn.defaultProps = {
    position: SelectFieldColumn.Positions.BELOW,
    fullWidth: true,
    repositionOnScroll: true
  };
  SelectFieldColumn.contextTypes = {
    rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  };
  exports.default = SelectFieldColumn;
});