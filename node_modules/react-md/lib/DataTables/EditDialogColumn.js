(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'react-dom', 'classnames', 'react-prop-types/lib/deprecated', '../constants/keyCodes', '../utils/getField', '../utils/viewport', '../utils/PropTypes/controlled', '../Helpers/anchorShape', '../Helpers/fixedToShape', '../Helpers/positionShape', '../Helpers/Layover', '../FontIcons/FontIcon', '../TextFields/TextField', './TableColumn', './EditDialog', './findTable', './findFixedTo'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('react-dom'), require('classnames'), require('react-prop-types/lib/deprecated'), require('../constants/keyCodes'), require('../utils/getField'), require('../utils/viewport'), require('../utils/PropTypes/controlled'), require('../Helpers/anchorShape'), require('../Helpers/fixedToShape'), require('../Helpers/positionShape'), require('../Helpers/Layover'), require('../FontIcons/FontIcon'), require('../TextFields/TextField'), require('./TableColumn'), require('./EditDialog'), require('./findTable'), require('./findFixedTo'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.reactDom, global.classnames, global.deprecated, global.keyCodes, global.getField, global.viewport, global.controlled, global.anchorShape, global.fixedToShape, global.positionShape, global.Layover, global.FontIcon, global.TextField, global.TableColumn, global.EditDialog, global.findTable, global.findFixedTo);
    global.EditDialogColumn = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _reactDom, _classnames, _deprecated, _keyCodes, _getField, _viewport, _controlled, _anchorShape, _fixedToShape, _positionShape, _Layover, _FontIcon, _TextField, _TableColumn, _EditDialog, _findTable, _findFixedTo) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _deprecated2 = _interopRequireDefault(_deprecated);

  var _getField2 = _interopRequireDefault(_getField);

  var _viewport2 = _interopRequireDefault(_viewport);

  var _controlled2 = _interopRequireDefault(_controlled);

  var _anchorShape2 = _interopRequireDefault(_anchorShape);

  var _fixedToShape2 = _interopRequireDefault(_fixedToShape);

  var _positionShape2 = _interopRequireDefault(_positionShape);

  var _Layover2 = _interopRequireDefault(_Layover);

  var _FontIcon2 = _interopRequireDefault(_FontIcon);

  var _TextField2 = _interopRequireDefault(_TextField);

  var _TableColumn2 = _interopRequireDefault(_TableColumn);

  var _EditDialog2 = _interopRequireDefault(_EditDialog);

  var _findTable2 = _interopRequireDefault(_findTable);

  var _findFixedTo2 = _interopRequireDefault(_findFixedTo);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var EditDialogColumn = function (_PureComponent) {
    _inherits(EditDialogColumn, _PureComponent);

    function EditDialogColumn(props) {
      _classCallCheck(this, EditDialogColumn);

      var _this = _possibleConstructorReturn(this, (EditDialogColumn.__proto__ || Object.getPrototypeOf(EditDialogColumn)).call(this, props));

      _initialiseProps.call(_this);

      _this.state = {
        visible: false,
        value: props.defaultValue,
        cancelValue: props.defaultValue,
        actions: _this._makeActions(props),
        cellIndex: undefined
      };
      return _this;
    }

    _createClass(EditDialogColumn, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._column = (0, _reactDom.findDOMNode)(this);
        this._table = (0, _findTable2.default)(this._column);
        this._fixedTo = (0, _findFixedTo2.default)(this._table);

        // If a developer creates their own component to wrap the EditDialogColumn, the cellIndex prop
        // might not be defined if they don't pass ...props
        var cellIndex = this.props.cellIndex;

        if (!cellIndex && cellIndex !== 0) {
          var columns = [].slice.call(this._column.parentNode.querySelectorAll('th,td'));
          this.setState({ cellIndex: columns.indexOf(this._column) }); // eslint-disable-line react/no-did-mount-set-state
        }
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var _props = this.props,
            okLabel = _props.okLabel,
            okPrimary = _props.okPrimary,
            okSecondary = _props.okSecondary,
            cancelLabel = _props.cancelLabel,
            cancelPrimary = _props.cancelPrimary,
            cancelSecondary = _props.cancelSecondary;

        if (okLabel !== nextProps.okLabel || okPrimary !== nextProps.okPrimary || okSecondary !== nextProps.okSecondary || cancelLabel !== nextProps.cancelLabel || cancelPrimary !== nextProps.cancelPrimary || cancelSecondary !== nextProps.cancelSecondary) {
          this.setState({ actions: this._makeActions(nextProps) });
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var rowId = this.context.rowId;

        var _props2 = this.props,
            style = _props2.style,
            className = _props2.className,
            layoverStyle = _props2.layoverStyle,
            layoverClassName = _props2.layoverClassName,
            dialogStyle = _props2.dialogStyle,
            dialogClassName = _props2.dialogClassName,
            dialogContentStyle = _props2.dialogContentStyle,
            dialogContentClassName = _props2.dialogContentClassName,
            dialogZDepth = _props2.dialogZDepth,
            textFieldStyle = _props2.textFieldStyle,
            textFieldClassName = _props2.textFieldClassName,
            inputClassName = _props2.inputClassName,
            large = _props2.large,
            title = _props2.title,
            inline = _props2.inline,
            inlineIconChildren = _props2.inlineIconChildren,
            inlineIconClassName = _props2.inlineIconClassName,
            maxLength = _props2.maxLength,
            noIcon = _props2.noIcon,
            label = _props2.label,
            placeholder = _props2.placeholder,
            header = _props2.header,
            anchor = _props2.anchor,
            belowAnchor = _props2.belowAnchor,
            fixedTo = _props2.fixedTo,
            animationPosition = _props2.animationPosition,
            xThreshold = _props2.xThreshold,
            yThreshold = _props2.yThreshold,
            centered = _props2.centered,
            sameWidth = _props2.sameWidth,
            repositionOnScroll = _props2.repositionOnScroll,
            transitionName = _props2.transitionName,
            transitionEnterTimeout = _props2.transitionEnterTimeout,
            transitionLeaveTimeout = _props2.transitionLeaveTimeout,
            tooltipLabel = _props2.tooltipLabel,
            tooltipDelay = _props2.tooltipDelay,
            tooltipPosition = _props2.tooltipPosition,
            propId = _props2.id,
            propDialogId = _props2.dialogId,
            propCellIndex = _props2.cellIndex,
            onOkClick = _props2.onOkClick,
            okLabel = _props2.okLabel,
            okPrimary = _props2.okPrimary,
            okSecondary = _props2.okSecondary,
            onCancelClick = _props2.onCancelClick,
            cancelLabel = _props2.cancelLabel,
            cancelPrimary = _props2.cancelPrimary,
            cancelSecondary = _props2.cancelSecondary,
            okOnOutsideClick = _props2.okOnOutsideClick,
            defaultValue = _props2.defaultValue,
            adjusted = _props2.adjusted,
            scrollIntoView = _props2.scrollIntoView,
            scrollIntoViewPadding = _props2.scrollIntoViewPadding,
            scrollThreshold = _props2.scrollThreshold,
            enforceMinWidth = _props2.enforceMinWidth,
            transitionDuration = _props2.transitionDuration,
            props = _objectWithoutProperties(_props2, ['style', 'className', 'layoverStyle', 'layoverClassName', 'dialogStyle', 'dialogClassName', 'dialogContentStyle', 'dialogContentClassName', 'dialogZDepth', 'textFieldStyle', 'textFieldClassName', 'inputClassName', 'large', 'title', 'inline', 'inlineIconChildren', 'inlineIconClassName', 'maxLength', 'noIcon', 'label', 'placeholder', 'header', 'anchor', 'belowAnchor', 'fixedTo', 'animationPosition', 'xThreshold', 'yThreshold', 'centered', 'sameWidth', 'repositionOnScroll', 'transitionName', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'id', 'dialogId', 'cellIndex', 'onOkClick', 'okLabel', 'okPrimary', 'okSecondary', 'onCancelClick', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'okOnOutsideClick', 'defaultValue', 'adjusted', 'scrollIntoView', 'scrollIntoViewPadding', 'scrollThreshold', 'enforceMinWidth', 'transitionDuration']);

        var _state = this.state,
            visible = _state.visible,
            actions = _state.actions;

        var value = (0, _getField2.default)(this.props, this.state, 'value');
        var cellIndex = (0, _getField2.default)(this.props, this.state, 'cellIndex');

        var _props3 = this.props,
            id = _props3.id,
            dialogId = _props3.dialogId;

        if (!dialogId) {
          dialogId = rowId + '-' + cellIndex + '-edit-dialog';
        }

        if (!id) {
          id = dialogId + '-field';
        }

        var inlineEditIcon = void 0;
        if (inline && !noIcon) {
          inlineEditIcon = _react2.default.createElement(
            _FontIcon2.default,
            { key: 'edit-icon', iconClassName: inlineIconClassName },
            inlineIconChildren
          );
        }

        var numeric = props.type === 'number';
        var field = _react2.default.createElement(_TextField2.default, _extends({}, props, {
          ref: this._setField,
          style: textFieldStyle,
          className: (0, _classnames2.default)({ 'md-edit-dialog__blocked-field': inline }, textFieldClassName),
          inputClassName: (0, _classnames2.default)({
            'md-text--secondary md-edit-dialog__header': header && inline,
            'md-text-right': numeric
          }, inputClassName),
          id: id,
          label: label,
          placeholder: placeholder,
          value: value,
          onFocus: this._handleFocus,
          onChange: this._handleChange,
          onKeyDown: this._handleKeyDown,
          block: inline,
          maxLength: visible ? maxLength : null,
          rightIcon: inlineEditIcon
        }));

        var children = void 0;
        if (inline) {
          children = field;
        } else {
          var dialogLabel = value || value === 0 ? value : placeholder || label;
          children = _react2.default.createElement(
            _EditDialog2.default,
            {
              style: layoverStyle,
              className: layoverClassName,
              dialogStyle: dialogStyle,
              dialogClassName: dialogClassName,
              dialogContentStyle: dialogContentStyle,
              dialogContentClassName: dialogContentClassName,
              id: dialogId,
              textFieldId: id,
              visible: visible,
              onOpen: this._handleOpen,
              onClose: this._handleClose,
              label: dialogLabel,
              actions: actions,
              large: large,
              title: title,
              header: header,
              placeholder: dialogLabel === placeholder || dialogLabel === label,
              anchor: anchor,
              belowAnchor: belowAnchor,
              animationPosition: animationPosition,
              xThreshold: xThreshold,
              yThreshold: yThreshold,
              centered: centered,
              sameWidth: sameWidth,
              fixedTo: typeof fixedTo !== 'undefined' ? fixedTo : this._fixedTo,
              dialogZDepth: dialogZDepth,
              repositionOnScroll: repositionOnScroll,
              transitionName: transitionName,
              transitionEnterTimeout: transitionEnterTimeout,
              transitionLeaveTimeout: transitionLeaveTimeout
            },
            field
          );
        }

        return _react2.default.createElement(
          _TableColumn2.default,
          {
            style: style,
            numeric: numeric,
            className: (0, _classnames2.default)('md-edit-dialog-column', className),
            header: header,
            adjusted: false,
            tooltipLabel: tooltipLabel,
            tooltipDelay: tooltipDelay,
            tooltipPosition: tooltipPosition
          },
          children
        );
      }
    }]);

    return EditDialogColumn;
  }(_react.PureComponent);

  EditDialogColumn.VerticalAnchors = _Layover2.default.VerticalAnchors;
  EditDialogColumn.HorizontalAnchors = _Layover2.default.HorizontalAnchors;
  EditDialogColumn.Positions = _Layover2.default.Positions;
  EditDialogColumn.propTypes = {
    /**
     * An optional id to use for the text field in the column. If this is omitted,
     * the id will be `${dialogId}-field`.
     *
     * @see {@link #dialogId}
     */
    id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    /**
     * An optional id to use for the dialog that appears in the column. If this is omitted,
     * the id will be `${rowId}-${cellIndex}-edit-dialog-field`.
     */
    dialogId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    /**
     * The optional style to apply to the edit dialog's column.
     */
    style: _propTypes2.default.object,

    /**
     * The optional className to apply to the edit dialog's column.
     */
    className: _propTypes2.default.string,

    /**
     * An optional style to apply to the dialog's surrounding `Layover` component.
     */
    layoverStyle: _propTypes2.default.object,

    /**
     * An optional className to the dialog's surrounding `Layover` component.
     */
    layoverClassName: _propTypes2.default.string,

    /**
     * The optional style to apply to the edit dialog.
     */
    dialogStyle: _propTypes2.default.object,

    /**
     * The optional className to apply to the edit dialog.
     */
    dialogClassName: _propTypes2.default.string,

    /**
     * An optional style to apply to the dialog's content area. This is the area
     * that holds the text field.
     */
    dialogContentStyle: _propTypes2.default.object,

    /**
     * An optional class name to apply to the dialog's content area. This is the area
     * that holds the text field.
     */
    dialogContentClassName: _propTypes2.default.string,

    /**
     * The zDepth to apply to the dialog when not inline.
     *
     * @see {@link Papers/Paper#zDepth}
     */
    dialogZDepth: _propTypes2.default.number.isRequired,

    /**
     * An optional style to apply to the text field.
     */
    textFieldStyle: _propTypes2.default.object,

    /**
     * An optional class name to apply to the text field.
     */
    textFieldClassName: _propTypes2.default.string,

    /**
     * An optional style to apply to the text field's input.
     */
    inputStyle: _propTypes2.default.object,

    /**
     * An optional class name to apply to the text field's input.
     */
    inputClassName: _propTypes2.default.string,

    /**
     * Boolean if the edit dialog is currently disabled.
     */
    disabled: _propTypes2.default.bool,

    /**
     * Boolean if the text field should be editable inline instead of in a dialog.
     *
     * @see {@link #noIcon}
     * @see {@link #inlineIconChildren}
     * @see {@link #inlineIconClassName}
     */
    inline: _propTypes2.default.bool,

    /**
     * The default value to use for the text field.
     */
    defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,

    /**
     * A value to use for the edit dialog text field. This will make the component controlled
     * so you will need to provide an `onChange` function.
     */
    value: (0, _controlled2.default)(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])),

    /**
     * An optional function to call when the text field's value has changed. This is required
     * if the `value` prop has been defined.
     *
     * @see {@link TextFields/TextField#onChange}
     */
    onChange: _propTypes2.default.func,

    /**
     * An optional function to call when the text field gains focus.
     */
    onFocus: _propTypes2.default.func,

    /**
     * An optional function to call when the keydown event is triggered on the text field.
     */
    onKeyDown: _propTypes2.default.func,

    /**
     * An optional label for the text field. When displaying an `inline` edit dialog column,
     * the `placeholder` prop should be used instead. This is because the text field changes
     * to the `block` type when `inline`.
     *
     * @see {@link #inline}
     * @see {@link #placeholder}
     * @see {@link TextFields/TextField#block}
     */
    label: _propTypes2.default.node,

    /**
     * An optional placeholder for the text field.
     */
    placeholder: _propTypes2.default.string,

    /**
     * Boolean if the edit dialog should become a large dialog. When the dialog is large,
     * the `title` prop is required.
     *
     * A large dialog has a Title followed by the text field, and then a cancel and ok action
     * buttons below.
     */
    large: _propTypes2.default.bool,

    /**
     * The title to use for the large edit dialog. This prop is required if the `large` prop
     * is enabled.
     */
    title: _propTypes2.default.node,

    /**
     * An optional `maxLength` to apply to the text field.
     *
     * @see {@link TextFields/TextField#maxLength}
     */
    maxLength: _propTypes2.default.number,

    /**
     * Any children required to render the inline edit icon.
     */
    inlineIconChildren: _propTypes2.default.node,

    /**
     * The icon class name used to render the inline edit icon.
     */
    inlineIconClassName: _propTypes2.default.string,

    /**
     * Boolean if no inline edit icon should be used.
     */
    noIcon: _propTypes2.default.bool,

    /**
     * An optional function to call when the "Ok" button has been clicked. This
     * is only valid if the edit dialog is `large`.
     *
     * The callback will include the current value and the click or keypress event.
     * ```js
     * onOkClick(value, event)
     * ```
     *
     * @see {@link #large}
     */
    onOkClick: _propTypes2.default.func,

    /**
     * The label to use for the "Ok" button in large dialogs.
     *
     * @see {@link #large}
     */
    okLabel: _propTypes2.default.node.isRequired,

    /**
     * Boolean if the "Ok" button in large dialogs should be styled with the primary color.
     * To get a `default` styled button, set both `okPrimary` and `okSecondary` (or omit `okSecondary`)
     * to `false`.
     *
     * @see {@link #large}
     * @see {@link #okSecondary}
     */
    okPrimary: _propTypes2.default.bool,

    /**
     * Boolean if the "Ok" button in large dialogs should be styled with the secondary color.
     *
     * @see {@link #large}
     * @see {@link #okPrimary}
     */
    okSecondary: _propTypes2.default.bool,

    /**
     * An optional function to call when the "Cancel" button has been clicked in large edit dialogs.
     * The callback will include the text field's value before any edits occured and the click event.
     *
     * ```js
     * onCancelClick(previousValue, event)
     * ```
     *
     * @see {@link #large}
     */
    onCancelClick: _propTypes2.default.func,

    /**
     * The label to give to the "Cancel" button in large edit dialogs.
     *
     * @see {@link #large}
     */
    cancelLabel: _propTypes2.default.node.isRequired,

    /**
     * Boolean if the "Cancel" button in large dialogs should be styled with the primary color.
     * To get a `default` styled button, set both `cancelPrimary` and `cancelSecondary` (or
     * omit `cancelSecondary`) to `false`.
     *
     * @see {@link #large}
     * @see {@link #cancelSecondary}
     */
    cancelPrimary: _propTypes2.default.bool,

    /**
     * Boolean if the "Cancel" button in large dialogs should be styled with the secondary color.
     *
     * @see {@link #large}
     * @see {@link #cancelPrimary}
     */
    cancelSecondary: _propTypes2.default.bool,

    /**
     * Boolean if the action for clicking somewhere on on the page while the dialog is open
     * saves the changes or cancels to the previous value before opening the dialog.
     *
     * @see {@link #onOkClick}
     * @see {@link #onCancelClick}
     */
    okOnOutsideClick: _propTypes2.default.bool,

    /**
     * An optional function to call when a user clicks out of the text field.
     */
    onOutsideClick: _propTypes2.default.func,

    /**
     * Boolean if the edit dialog should be closed if the user clicks somewhere else on the page
     * while the dialog is open.
     */
    closeOnOutsideClick: _propTypes2.default.bool,

    /**
     * The type for the text field in the edit dialog.
     *
     * @see {@link TextFields/TextField#type}
     */
    type: _propTypes2.default.string,

    /**
     * This is how the dialog gets "anchored" to the table column.
     *
     * @see {@link Helpers/Layovers#anchor}
     */
    anchor: _anchorShape2.default,

    /**
     * This is the anchor to use when the `position` is set to `Autocomplete.Positions.BELOW`.
     *
     * @see {@link Helpers/Layovers#belowAnchor}
     */
    belowAnchor: _anchorShape2.default,

    /**
     * This is the animation position to use for the dialog.
     *
     * @see {@link Helpers/Layovers#animationPosition}
     */
    animationPosition: _positionShape2.default,

    /**
     * This is how the dialog should be fixed within the table. When this is omitted, it will
     * automatically use the responsive table as the fixture so that the dialog will close/adjust itself
     * to the scrolling of the table.
     *
     * @see {@link Helpers/Layovers#fixedTo}
     */
    fixedTo: _fixedToShape2.default,

    /**
     * @see {@link Helpers/Layovers#xThreshold}
     */
    xThreshold: _propTypes2.default.number,

    /**
     * @see {@link Helpers/Layovers#yThreshold}
     */
    yThreshold: _propTypes2.default.number,

    /**
     * @see {@link Helpers/Layovers#centered}
     */
    centered: _propTypes2.default.bool,

    /**
     * @see {@link Helpers/Layovers#sameWidth}
     */
    sameWidth: _propTypes2.default.bool,

    /**
     * @see {@link Helpers/Layovers#transitionName}
     */
    transitionName: _propTypes2.default.string,

    /**
     * @see {@link Helpers/Layovers#transitionEnterTimeout}
     */
    transitionEnterTimeout: _propTypes2.default.number,

    /**
     * @see {@link Helpers/Layovers#transitionLeaveTimeout}
     */
    transitionLeaveTimeout: _propTypes2.default.number,

    /**
     * The optional tooltip to render on hover.
     */
    tooltipLabel: _propTypes2.default.node,

    /**
     * An optional delay to apply to the tooltip before it appears.
     */
    tooltipDelay: _propTypes2.default.number,

    /**
     * The position of the tooltip.
     */
    tooltipPosition: _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left']),

    /**
     * Boolean if the menu should automatically try to reposition itself to stay within
     * the viewport when the `fixedTo` element scrolls.
     *
     * @see {@link Helpers/Layovers#fixedTo}
     */
    repositionOnScroll: _propTypes2.default.bool,

    /**
     * Boolean if the edit dialog should attempt to scroll into view if the full
     * dialog can not be displayed in the viewport when it was toggled open.
     *
     * @see {@link #scrollIntoViewPadding}
     */
    scrollIntoView: _propTypes2.default.bool,

    /**
     * The amount of padding that should be applied when the cell is scrolled into view.
     * This will be applied to the left of the cell.
     */
    scrollIntoViewPadding: _propTypes2.default.number,

    /**
     * This is injected by the `TableRow` component.
     * @access private
     */
    header: _propTypes2.default.bool,

    /**
     * This is injected by the `TableRow` component and used to help generate the unique id for the text
     * field.
     *
     * @access private
     */
    cellIndex: _propTypes2.default.number,

    /**
     * @access private
     */
    adjusted: _propTypes2.default.bool,

    enforceMinWidth: (0, _deprecated2.default)(_propTypes2.default.bool, 'The min width will always be enforced based on the `$md-edit-dialog-min-width` Sass variable.'),
    scrollThreshold: (0, _deprecated2.default)(_propTypes2.default.number, 'Use `xThreshold` and `yThreshold` instead'),
    transitionDuration: (0, _deprecated2.default)(_propTypes2.default.number, 'use `transitionEnterTimeout` and `transitionLeaveTimeout` instead')
  };
  EditDialogColumn.defaultProps = {
    type: 'text',
    defaultValue: '',
    okOnOutsideClick: true,
    inlineIconChildren: 'edit',
    okLabel: 'Save',
    okPrimary: true,
    cancelLabel: 'Cancel',
    cancelPrimary: true,
    animationPosition: EditDialogColumn.Positions.BELOW,
    dialogZDepth: 1,
    repositionOnScroll: true,
    scrollIntoView: true,
    scrollIntoViewPadding: 16
  };
  EditDialogColumn.contextTypes = {
    rowId: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  };

  var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this._setField = function (field) {
      _this2._field = field;
    };

    this._makeActions = function (props) {
      var okLabel = props.okLabel,
          okPrimary = props.okPrimary,
          okSecondary = props.okSecondary,
          cancelLabel = props.cancelLabel,
          cancelPrimary = props.cancelPrimary,
          cancelSecondary = props.cancelSecondary;


      return [{
        key: 'cancel',
        children: cancelLabel,
        onClick: _this2._handleCancel,
        primary: cancelPrimary && !cancelSecondary,
        secondary: cancelSecondary
      }, {
        key: 'ok',
        children: okLabel,
        onClick: _this2._handleOk,
        primary: okPrimary && !okSecondary,
        secondary: okSecondary
      }];
    };

    this._handleOpen = function () {
      if (_this2._skipNextOpen) {
        _this2._skipNextOpen = false;
      } else {
        var _props4 = _this2.props,
            scrollIntoView = _props4.scrollIntoView,
            scrollIntoViewPadding = _props4.scrollIntoViewPadding;

        if (scrollIntoView) {
          var vp = (0, _viewport2.default)(_this2._column);
          if (vp !== true && _this2._table && _this2._column && !_this2.props.inline) {
            _this2._table.scrollLeft = _this2._column.offsetLeft - scrollIntoViewPadding;
          }
        }

        _this2.setState({ visible: true, cancelValue: (0, _getField2.default)(_this2.props, _this2.state, 'value') });
      }
    };

    this._handleClose = function (e) {
      var _props5 = _this2.props,
          onOutsideClick = _props5.onOutsideClick,
          okOnOutsideClick = _props5.okOnOutsideClick;

      if (onOutsideClick) {
        onOutsideClick(e);
      }

      if (okOnOutsideClick) {
        _this2._handleOk(e);
      } else {
        _this2._handleCancel(e);
      }
    };

    this._handleChange = function (value, e) {
      if (_this2.props.onChange) {
        _this2.props.onChange(value, e);
      }

      if (typeof _this2.props.value === 'undefined') {
        _this2.setState({ value: value });
      }
    };

    this._handleFocus = function (e) {
      if (_this2.props.onFocus) {
        _this2.props.onFocus(e);
      }

      if (_this2.props.inline) {
        _this2.setState({ cancelValue: e.target.value });
      }
    };

    this._handleKeyDown = function (e) {
      var _props6 = _this2.props,
          onKeyDown = _props6.onKeyDown,
          okOnOutsideClick = _props6.okOnOutsideClick,
          large = _props6.large;

      if (onKeyDown) {
        onKeyDown(e);
      }

      var key = e.which || e.keyCode;
      if (key === _keyCodes.ENTER) {
        _this2._handleOk(e);
      } else if (key === _keyCodes.ESC) {
        _this2._handleCancel(e);
      } else if (key === _keyCodes.TAB && !large) {
        // infinitely opens otherwise...
        _this2._skipNextOpen = e.shiftKey;

        if (okOnOutsideClick) {
          _this2._handleOk(e);
        } else {
          _this2._handleCancel(e);
        }
      }
    };

    this._handleOk = function (e) {
      if (_this2.props.onOkClick) {
        _this2.props.onOkClick((0, _getField2.default)(_this2.props, _this2.state, 'value'), e);
      }

      _this2.setState({ visible: false });
    };

    this._handleCancel = function (e) {
      var value = _this2.state.cancelValue;
      if (_this2.props.onCancelClick) {
        _this2.props.onCancelClick(value, e);
      }

      var state = { visible: false };
      if (typeof _this2.props.value === 'undefined') {
        state.value = value;
      }

      _this2.setState(state);
    };
  };

  exports.default = EditDialogColumn;
});